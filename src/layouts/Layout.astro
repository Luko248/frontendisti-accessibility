---
import "../styles/globals.css";

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Accessible UI primitives built with Astro and Tailwind CSS 4" } = Astro.props;
const baseUrl = import.meta.env.BASE_URL || "/";
const configuredBase = baseUrl.endsWith("/") ? baseUrl : `${baseUrl}/`;
const stripSlashes = (value: string) =>
  value.replace(/^\/+/, "").replace(/\/+$/, "");
const currentPathKey = (() => {
  const rawPath = Astro.url.pathname.startsWith(configuredBase)
    ? Astro.url.pathname.slice(configuredBase.length)
    : Astro.url.pathname;
  return stripSlashes(rawPath);
})();
const derivedBasePath = (() => {
  if (configuredBase !== "/") {
    return configuredBase;
  }
  let resolved = Astro.url.pathname;
  if (currentPathKey) {
    const pattern = new RegExp(`/${currentPathKey}/?$`);
    resolved = resolved.replace(pattern, "/");
  }
  return resolved.endsWith("/") ? resolved : `${resolved}/`;
})();
const links = [
  { path: "", label: "Home" },
  { path: "modal", label: "Modal" },
  { path: "popover", label: "Popover" },
  { path: "accordion", label: "Accordion" },
  { path: "carousel", label: "Carousel" },
  { path: "scrollspy", label: "Scrollspy" },
];
const navHeight = "3.5rem";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
  </head>
  <body
    class="min-h-screen bg-slate-50 text-slate-900 antialiased"
    style={`--nav-height: ${navHeight};`}
  >
    <header>
      <nav
        aria-label="Primary"
        class="flex fixed top-0 left-1/2 -translate-x-1/2 items-center justify-center px-4"
      >
        <ul
          class="flex flex-wrap items-center justify-center gap-4 py-3 text-sm font-medium text-slate-700"
        >
          {
            links.map(({ path, label }) => {
              const href = `${derivedBasePath}${path}`;
              const linkKey = stripSlashes(path);
              const isCurrent = currentPathKey === linkKey;
              return (
                <li>
                  <a
                    href={href}
                    aria-current={isCurrent ? "page" : undefined}
                    class={`rounded-full px-3 py-1 transition-colors focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary ${
                      isCurrent
                        ? "bg-primary/10 text-primary"
                        : "text-slate-600 hover:text-primary"
                    }`}
                  >
                    {label}
                  </a>
                </li>
              );
            })
          }
        </ul>
      </nav>
    </header>
    <main class="h-screen">
      <slot />
    </main>
  </body>
</html>
