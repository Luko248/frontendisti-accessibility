---
import Layout from "../layouts/Layout.astro";

const sectionClassName =
  "flex w-full max-w-3xl flex-col items-center gap-10 text-center";
const selectWrapperClassName = "w-full max-w-md space-y-3 text-left";
const labelClassName = "block text-sm font-medium text-slate-700";
const noteClassName = "text-sm text-slate-600";
const baseUrl = import.meta.env.BASE_URL || "/";
const basePath = baseUrl.endsWith("/") ? baseUrl : `${baseUrl}/`;
const speakers = [
  {
    value: "martin-pesout",
    name: "Martin Pešout",
    image: "martin-pesout.webp",
    alt: "Martin Pešout",
  },
  {
    value: "zuzana-sumlanska",
    name: "Zuzana Šumlanská",
    image: "zuzana-sumlanska.webp",
    alt: "Zuzana Šumlanská",
  },
  {
    value: "krystof-klaban",
    name: "Kryštof Klaban",
    image: "krystof-klaban.webp",
    alt: "Kryštof Klaban",
  },
  {
    value: "viktor-danko",
    name: "Viktor Daňko",
    image: "viktor-danko.webp",
    alt: "Viktor Daňko",
  },
  {
    value: "lukas-chylik",
    name: "Lukáš Chylík",
    image: "lukas-chylik.webp",
    alt: "Lukáš Chylík",
  },
];
const assetPath = (file: string) => `${basePath}images/speakers/${file}`;
---

<Layout title="Select">
  <div class="flex items-center justify-center h-full">
    <section class={sectionClassName}>
      <header class="space-y-4 text-center">
        <h1 class="text-4xl font-semibold text-gray-900 mx-auto">
          Custom Select Pattern Playground
        </h1>
        <p class="text-lg text-gray-700">
          Explore the emerging Selectmenu API with a stylable, accessible
          dropdown.
        </p>
      </header>

      <div class={selectWrapperClassName}>
        <label for="speaker-select" class={labelClassName}>
          Choose a speaker
        </label>
        <select
          id="speaker-select"
          class="custom-select"
          aria-describedby="select-note"
        >
          <button type="button" class="select-trigger primary">
            <small class="select-subtitle">Featured speaker</small>
            <div class="select-display">
              <selectedcontent></selectedcontent>
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                aria-hidden="true"
                focusable="false"
              >
                <path fill="currentColor" d="m7 10l5 5l5-5z"></path>
              </svg>
            </div>
          </button>
          <div class="scrollable">
            {
              speakers.map(({ value, name, image, alt }) => (
                <option value={value} selected={value === speakers[0].value}>
                  <span class="sr-only">{name}</span>
                  <div class="custom-option">
                    <span class="avatar">
                      <img
                        width="32"
                        height="32"
                        src={assetPath(image)}
                        alt={alt}
                        loading="lazy"
                      />
                    </span>
                    <span class="option-text">{name}</span>
                  </div>
                </option>
              ))
            }
          </div>
        </select>
        <p id="select-note" class={noteClassName}>
          Works best in Chromium browsers with the Selectmenu API enabled.
          Others will display a native select.
        </p>
      </div>
    </section>
  </div>

  <style>
    @import "https://unpkg.com/open-props" layer(design.system);
    @import "https://unpkg.com/open-props/normalize.min.css" layer(demo.support);
    @import "https://unpkg.com/open-props/buttons.min.css" layer(demo.support);

    :root {
      --link: var(--color-primary);
    }

    select {
      &,
      &::picker(select) {
        appearance: base-select;
      }

      font-size: var(--font-size-1);
      background: none;
      padding: 0;

      &::picker(select) {
        transition:
          opacity 0.2s ease,
          transform 0.2s var(--ease-out-3),
          display 0.2s allow-discrete,
          overlay 0.2s allow-discrete;
      }

      &::picker-icon {
        display: none;
      }

      &:not(:open)::picker(select) {
        opacity: 0;
        transform: scale(0.95);
      }

      &:open::picker(select) {
        opacity: 1;
        transform: scale(1);
      }

      selectedcontent > * {
        transition:
          transform 1s var(--ease-spring-4),
          display 1s allow-discrete,
          opacity 1s;

        @starting-style {
          opacity: 0;
          transform: translateY(10px);
        }
        opacity: 1;
      }

      > button {
        --_text: var(--text-1);

        &:focus-visible {
          outline-offset: -3px;
        }

        &:has(selectedcontent) {
          align-items: start;
          min-inline-size: 20ch;
          flex-direction: column;
        }

        &.primary {
          --_bg: var(--link);
          --_border: none;
          --_text: var(--surface-1);
          --_ink-shadow: none;
        }

        > div {
          inline-size: 100%;
          display: flex;
          justify-content: space-between;
          gap: var(--size-3);
        }

        & > small {
          color: var(--text-2);
        }

        & svg {
          inline-size: 2ch;
          transition: transform 0.3s var(--ease-elastic-out-2);
        }
      }

      &:open > button svg {
        transform: rotate(0.5turn);
      }

      &::picker(select) {
        background: light-dark(white, var(--surface-2));
        border-radius: var(--radius-2);
        padding: 0;
        margin-block: 5px;
        box-shadow: var(--shadow-5);

        @media (forced-colors: none) {
          border: none;
        }
      }

      > div {
        min-inline-size: calc(anchor-size(self-inline) + 20px);
        scroll-behavior: smooth;

        &.scrollable {
          max-block-size: 20lh;
          scrollbar-width: thin;
        }

        & hr {
          margin-block: var(--size-2);
        }

        & label {
          display: block;
          position: sticky;
          top: 0;
          z-index: 1;
          background: var(--surface-3);
          font-size: var(--font-size-0);
          color: var(--text-2);
          font-weight: var(--font-weight-7);
          padding-block: var(--size-1);
          padding-inline: var(--size-3);
        }

        & option {
          display: flex;
          align-items: center;
          gap: var(--size-3);
          padding-block: var(--size-2);
          padding-inline: var(--size-3);
          font-size: var(--font-size-1);

          cursor: pointer;
          outline-offset: -1px;

          &::checkmark {
            font-weight: var(--font-weight-8);
          }

          &:focus-visible {
            outline-offset: -1px;
          }

          &:is(:focus, :hover) {
            background: oklch(from var(--link) l c h / 25%);
            color: inherit;
          }

          &:is(:checked) {
            background: var(--link);
            color: var(--surface-1);
            font-weight: var(--font-weight-8);
          }
        }
      }
    }

    .custom-option {
      display: flex;
      gap: var(--size-3);
      align-items: center;
      justify-content: space-between;

      .primary & {
        display: grid;
        gap: var(--size-1);
      }

      &:has(.description) {
        display: grid;
        justify-items: start;
        gap: var(--size-2);
        padding-block: var(--size-2);
        text-shadow: none;

        & .description {
          color: var(--text-2);
        }
      }

      option:is(:checked) & .description {
        font-weight: normal;
        color: var(--surface-2);
      }

      selectedcontent & .description {
        display: none;
      }
    }

    .option-text {
      flex: 2;
    }

    .avatar {
      border-radius: var(--radius-round);
      overflow: hidden;
    }
  </style>
</Layout>
